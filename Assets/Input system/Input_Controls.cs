//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input system/Input_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_Controls"",
    ""maps"": [
        {
            ""name"": ""Action_Map"",
            ""id"": ""7ed8bee5-6cb9-4313-bbbd-afed06e645b5"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""fd3e27e8-1040-47ba-9bfe-1e5d756d8277"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPosition"",
                    ""type"": ""Value"",
                    ""id"": ""f3efb977-58ca-47d6-84cf-06c52640b727"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4409ecc7-ed36-4404-b132-e8a2790f5441"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Smartphone"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""065788b7-7e49-42e0-a012-2407e36277d6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Smartphone"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31dfc7bf-aa0e-4222-954b-c53e707c9549"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Smartphone"",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d72c5599-f8b9-4929-9d85-06cecc17e753"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Smartphone"",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Smartphone"",
            ""bindingGroup"": ""Smartphone"",
            ""devices"": []
        }
    ]
}");
        // Action_Map
        m_Action_Map = asset.FindActionMap("Action_Map", throwIfNotFound: true);
        m_Action_Map_Tap = m_Action_Map.FindAction("Tap", throwIfNotFound: true);
        m_Action_Map_TapPosition = m_Action_Map.FindAction("TapPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Action_Map
    private readonly InputActionMap m_Action_Map;
    private IAction_MapActions m_Action_MapActionsCallbackInterface;
    private readonly InputAction m_Action_Map_Tap;
    private readonly InputAction m_Action_Map_TapPosition;
    public struct Action_MapActions
    {
        private @Input_Controls m_Wrapper;
        public Action_MapActions(@Input_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Action_Map_Tap;
        public InputAction @TapPosition => m_Wrapper.m_Action_Map_TapPosition;
        public InputActionMap Get() { return m_Wrapper.m_Action_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Action_MapActions set) { return set.Get(); }
        public void SetCallbacks(IAction_MapActions instance)
        {
            if (m_Wrapper.m_Action_MapActionsCallbackInterface != null)
            {
                @Tap.started -= m_Wrapper.m_Action_MapActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_Action_MapActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_Action_MapActionsCallbackInterface.OnTap;
                @TapPosition.started -= m_Wrapper.m_Action_MapActionsCallbackInterface.OnTapPosition;
                @TapPosition.performed -= m_Wrapper.m_Action_MapActionsCallbackInterface.OnTapPosition;
                @TapPosition.canceled -= m_Wrapper.m_Action_MapActionsCallbackInterface.OnTapPosition;
            }
            m_Wrapper.m_Action_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
                @TapPosition.started += instance.OnTapPosition;
                @TapPosition.performed += instance.OnTapPosition;
                @TapPosition.canceled += instance.OnTapPosition;
            }
        }
    }
    public Action_MapActions @Action_Map => new Action_MapActions(this);
    private int m_SmartphoneSchemeIndex = -1;
    public InputControlScheme SmartphoneScheme
    {
        get
        {
            if (m_SmartphoneSchemeIndex == -1) m_SmartphoneSchemeIndex = asset.FindControlSchemeIndex("Smartphone");
            return asset.controlSchemes[m_SmartphoneSchemeIndex];
        }
    }
    public interface IAction_MapActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnTapPosition(InputAction.CallbackContext context);
    }
}
